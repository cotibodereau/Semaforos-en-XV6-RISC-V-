Integrantes: Fernández Bodereau Constanza - Ferreyra Navarro Nicolle Anahid - Fonseca Gonzalo Agustín - Heredia Mateo Andrés
¿Cómo nos dividimos? 
De las 4 funciones que había que implementar en semaforos.c , nos dividimos una cada uno. Después, para pingpong.c y el resto de cosas estuvimos en Discord haciendo entre todos :)

Explicación de semaforos.c y pingpong.c

Para la implementación de nuestro semáforo nosotros pensamos en diseñar una estructura constituida por tres campos, uno para el valor del semáforo, otro para indicar si el semáforo se encuentra activo (1 indica si / 0 indica no) y otro para los spinlock que nos garantizan evitar carreras entre los procesos y no tener problemas de sincronización.
Luego creamos un arreglo de semáforos teniendo en cuenta que nuestro tamaño máximo lo definimos de forma constante en una variable con valor 0 y todos inactivos, cada uno con su debido spinlock. 
Para cada una de las funciones sem realizamos chequeos de los casos bordes para así evitar que haya id´s incorrectos. En open buscamos el primer semáforo inactivo usando un ciclo y así inicializarlo cambiando su valor y su estado a 1, además, le asignamos su spinlock. 
Para cerrar un semáforo le asignamos -1 de valor y lo dejamos inactivo, además de liberar su spinlock. 
Para las funciones de incremento y decremento garantizamos una correcta sincronización mediante los spinlock e implementamos su funcionamiento utilizando llamadas como sleep y wake up que se encargan de despertar o dormir los procesos teniendo en cuenta los recursos disponibles del semáforo. 
La utilización de un campo de sí un semáforo está activo permite la reutilización de los mismos, lo cual nos garantiza un buen uso de los recursos disponibles.

Por otro lado, en pingpong.c teníamos que sincronizar dos procesos para que se impriman "ping" y "pong" alternadamente, recibiendo un argumento que nos indique el número de veces que queremos hacer esto.
Para esto nosotros primero revisamos que la cantidad de argumentos que nos pasan sea uno solo, y que aparte sea positivo. En caso de error, mostramos un mensaje de error y salimos. Luego, creamos dos semáforos, al primero (semaforo_0) lo inicializamos como activo (osea en 1) , así este proceso padre puede empezar a imprimir "ping" ahí mismo. Al segundo (semaforo_1) lo inicializamos como inactivo (osea en 0), teniendo que esperar su turno para imprimir "pong" para que no se pisen las salidas.
Usamos un único fork() para crear el proceso hijo, si llega a salir mal la creación, mostramos de vuelta el mensaje de error y frenamos. 
Para realizar la secuencia que queremos, usamos un for para que ambos procesos se turnen para imprimir. El padre espera su turno con sem_down(semaforo_0), después imprime "ping", y luego le deja el turno al hijo con sem_up(semaforo_1). Por otro lado, el hijo espera sem_down(semaforo_1), imprime el "pong" y le vuelve a pasar el turno al padre con  sem_up(semaforo_0). Después de que el ciclo se repita las n veces que se pidieron, el padre espera con wait(0) a que el hijo termine y ahí recién cerramos los semáforos con sem_close(semaforo_0) y sem_close(semaforo_1) para limpiar todo.


.
.
.
.
.



xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian
Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,
eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel
Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt
Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John
Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller,
Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin
Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan
Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel
Nider, Hayato Ohhashi, OptimisticSide, Harry Porter, Greg Price, Jude
Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal,
Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe,
Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng,
ZhUyU1997, and Zou Chang Wei.


The code in the files that constitute xv6 is
Copyright 2006-2022 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
